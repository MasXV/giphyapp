{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API_KEY","Grid","props","c","images","map","item","index","react_default","a","createElement","id","onClick","imageClick","key","src","Search","onSubmit","handleFormSubmit","type","onChange","handleSearchInput","value","searchInput","className","placeholder","Modal","url","href","giphyURl","handleClose","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isImagesLoaded","error","isModalShown","modalURL","modalGiphyURL","handleImageClick","bind","assertThisInitialized","handleBodyClick","handleModalClose","API","_this2","fetch","then","res","json","result","setState","isLoaded","data","callApi","e","target","original","preventDefault","searchAPI","console","log","urls","fixed_width","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86ed2965.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nconst API_KEY = '8K43T8LNtSz5xtNVpR73qg9YnKESx1UH';\n\n\nfunction Grid(props)\n{\n  const c = props.images.map((item, index) =>\n    <img id={index} onClick={props.imageClick} key={index} src={item} />);\n  return (\n    <div>\n\n    <h1> Gifs...</h1>\n\n      {c}\n  </div>\n  );\n}\nfunction  Search(props)\n{\n    return (\n      <form onSubmit={props.handleFormSubmit}>\n        <input type=\"text\" onChange={props.handleSearchInput} value={props.searchInput} className=\"Search-field\" placeholder=\"Search term & hit enter!\"></input>\n        </form>\n    );\n\n}\n\nfunction Modal(props)\n{\n  return (\n    <div className=\"Modal\">\n  <img src={props.url}/>\n  <hr />\n  <a href={props.giphyURl}><button><i className=\"fa fa-eye\"></i> View on Giphy</button></a>\n  <button onClick={props.handleClose}><i className=\"fa fa-window-close\"></i> Close</button>\n    </div>\n\n  );\n}\n\nclass App extends Component {\n\n\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      isImagesLoaded: false,\n      images: [],\n      error: null,\n      isModalShown: false,\n      modalURL: '',\n      searchInput: '',\n      modalGiphyURL: ''\n    };\n    this.handleImageClick = this.handleImageClick.bind(this);\n    this.handleBodyClick = this.handleBodyClick.bind(this);\n    this.handleModalClose = this.handleModalClose.bind(this);\n    this.handleSearchInput = this.handleSearchInput.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n  }\n  callApi(API)\n  {\n\n    fetch(API)\n    .then(res => res.json())\n    .then((result) => {\n\n      this.setState({\n        isLoaded: true,\n        images: result.data\n      });\n    },\n    (error) => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    }\n    )\n  }\n  componentDidMount()\n  {\n    const API = \"http://api.giphy.com/v1/gifs/trending?api_key=\"+API_KEY;\n\n    this.callApi(API);\n  }\n\n  handleModalClose()\n  {\n    this.setState({\n      isModalShown: false\n    })\n  }\n\n  handleImageClick(e)\n  {\n    this.setState({\n      isModalShown: true\n    });\n\n    this.setState({\n      modalURL: this.state.images[e.target.id].images.original.url,\n      modalGiphyURL: this.state.images[e.target.id].url\n    });\n  }\n\n  handleSearchInput(e)\n  {\n    this.setState({\n      searchInput: e.target.value\n    })\n  }\n\n  handleFormSubmit(e)\n  {\n    e.preventDefault();\n    const searchAPI = 'http://api.giphy.com/v1/gifs/search?api_key='+API_KEY+'&q='+this.state.searchInput;\n    this.callApi(searchAPI);\n    console.log('clicked');\n  }\n  handleBodyClick()\n  {\n    if (this.state.isModalShown)\n    this.setState({\n      isModalShown: false\n    })\n  }\n\n  render() {\n    const urls = this.state.images.map((item) => {\n         return item.images.fixed_width.url;\n   });\n    return (\n       <div className=\"App\">\n        <div className=\"App-header\">\n        <div onClick={this.handleBodyClick} className={this.state.isModalShown ? \"Content\":''}>\n        <h1>GiphyApp</h1>\n        <Search searchInput={this.state.searchInput} handleSearchInput={this.handleSearchInput} handleFormSubmit={this.handleFormSubmit}/>\n        <Grid images={urls} imageClick={this.handleImageClick}/>\n        </div>\n        {this.state.isModalShown && <Modal url={this.state.modalURL} handleClose={this.handleModalClose} giphyURl={this.state.modalGiphyURL}/>}\n        <div className={this.state.isModalShown ? \"Content\":''}>\n        <p class=\"footer\">Made by Masroor Aijaz for learning ReactJS!</p>\n        <p class=\"small\">Uses <a href=\"https://developers.giphy.com/\">GiphyAPI</a></p>\n\n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}